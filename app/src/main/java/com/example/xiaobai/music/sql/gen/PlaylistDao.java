package com.example.xiaobai.music.sql.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.xiaobai.music.sql.bean.Playlist;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAYLIST".
*/
public class PlaylistDao extends AbstractDao<Playlist, Long> {

    public static final String TABLENAME = "PLAYLIST";

    /**
     * Properties of entity Playlist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Play_list_id = new Property(1, Long.class, "play_list_id", false, "PLAY_LIST_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Pic_url = new Property(3, String.class, "pic_url", false, "PIC_URL");
        public final static Property Create_time = new Property(4, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Song_num = new Property(5, String.class, "song_num", false, "SONG_NUM");
    }


    public PlaylistDao(DaoConfig config) {
        super(config);
    }
    
    public PlaylistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAYLIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PLAY_LIST_ID\" INTEGER," + // 1: play_list_id
                "\"NAME\" TEXT," + // 2: name
                "\"PIC_URL\" TEXT," + // 3: pic_url
                "\"CREATE_TIME\" TEXT," + // 4: create_time
                "\"SONG_NUM\" TEXT);"); // 5: song_num
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PLAYLIST__id ON \"PLAYLIST\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAYLIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Playlist entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long play_list_id = entity.getPlay_list_id();
        if (play_list_id != null) {
            stmt.bindLong(2, play_list_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(4, pic_url);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(5, create_time);
        }
 
        String song_num = entity.getSong_num();
        if (song_num != null) {
            stmt.bindString(6, song_num);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Playlist entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long play_list_id = entity.getPlay_list_id();
        if (play_list_id != null) {
            stmt.bindLong(2, play_list_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(4, pic_url);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(5, create_time);
        }
 
        String song_num = entity.getSong_num();
        if (song_num != null) {
            stmt.bindString(6, song_num);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Playlist readEntity(Cursor cursor, int offset) {
        Playlist entity = new Playlist( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // play_list_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // song_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Playlist entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlay_list_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPic_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreate_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSong_num(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Playlist entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Playlist entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Playlist entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
