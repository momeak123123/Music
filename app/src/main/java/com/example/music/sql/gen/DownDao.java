package com.example.music.sql.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.music.sql.bean.Down;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN".
*/
public class DownDao extends AbstractDao<Down, Long> {

    public static final String TABLENAME = "DOWN";

    /**
     * Properties of entity Down.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Playid = new Property(1, Long.class, "playid", false, "PLAYID");
        public final static Property Song_id = new Property(2, Long.class, "song_id", false, "SONG_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Album_name = new Property(4, String.class, "album_name", false, "ALBUM_NAME");
        public final static Property Album_id = new Property(5, String.class, "album_id", false, "ALBUM_ID");
        public final static Property Uri = new Property(6, String.class, "uri", false, "URI");
        public final static Property All_artist = new Property(7, String.class, "all_artist", false, "ALL_ARTIST");
        public final static Property Pic_url = new Property(8, String.class, "pic_url", false, "PIC_URL");
        public final static Property Publish_time = new Property(9, String.class, "publish_time", false, "PUBLISH_TIME");
    }


    public DownDao(DaoConfig config) {
        super(config);
    }
    
    public DownDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PLAYID\" INTEGER," + // 1: playid
                "\"SONG_ID\" INTEGER," + // 2: song_id
                "\"NAME\" TEXT," + // 3: name
                "\"ALBUM_NAME\" TEXT," + // 4: album_name
                "\"ALBUM_ID\" TEXT," + // 5: album_id
                "\"URI\" TEXT," + // 6: uri
                "\"ALL_ARTIST\" TEXT," + // 7: all_artist
                "\"PIC_URL\" TEXT," + // 8: pic_url
                "\"PUBLISH_TIME\" TEXT);"); // 9: publish_time
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DOWN__id ON \"DOWN\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Down entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long playid = entity.getPlayid();
        if (playid != null) {
            stmt.bindLong(2, playid);
        }
 
        Long song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindLong(3, song_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String album_name = entity.getAlbum_name();
        if (album_name != null) {
            stmt.bindString(5, album_name);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(6, album_id);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(7, uri);
        }
 
        String all_artist = entity.getAll_artist();
        if (all_artist != null) {
            stmt.bindString(8, all_artist);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(9, pic_url);
        }
 
        String publish_time = entity.getPublish_time();
        if (publish_time != null) {
            stmt.bindString(10, publish_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Down entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long playid = entity.getPlayid();
        if (playid != null) {
            stmt.bindLong(2, playid);
        }
 
        Long song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindLong(3, song_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String album_name = entity.getAlbum_name();
        if (album_name != null) {
            stmt.bindString(5, album_name);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(6, album_id);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(7, uri);
        }
 
        String all_artist = entity.getAll_artist();
        if (all_artist != null) {
            stmt.bindString(8, all_artist);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(9, pic_url);
        }
 
        String publish_time = entity.getPublish_time();
        if (publish_time != null) {
            stmt.bindString(10, publish_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Down readEntity(Cursor cursor, int offset) {
        Down entity = new Down( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // playid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // song_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // album_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // album_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uri
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // all_artist
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pic_url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // publish_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Down entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlayid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSong_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlbum_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlbum_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUri(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAll_artist(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPic_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPublish_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Down entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Down entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Down entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
